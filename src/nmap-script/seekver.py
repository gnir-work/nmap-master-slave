#!/usr/bin/python
import threading
import os
import sys
import re
import datetime
from nmap import PortScannerAsync

# This script uses the text file that was generated by seeker2.py
# It parse for open syn and udp port and run nmap for version detection


class NmapWaitForMe(PortScannerAsync):
    # I need to Polymorph PortScannerAsync in order for nmap to wait for other callback Process,
    # otherwise it will prematurely terminate
    def check_for_proc(self):
        self._process.join()


# FUNCTIONS ----------------------------------------------
# This function will parse the result dump the needed info on a file
def callback_result(host, result):
    if result == None:
        print('info received from %s is empty \n' % host)
    elif int(result['nmap']['scanstats']['uphosts']) == 0:
        print('Host %s is down\n' % host),
    elif int(result['nmap']['scanstats']['uphosts']) == 1:
        print('info received from %s \n' % host),
        r_buffer =(host)
        for p_found in result['scan'][host]:
            # p_found is either tcp, udp or gre
            if p_found in ports_prot:
                p_parser = ports_prot[p_found]
                r_buffer_p = ''
                for p_name in result['scan'][host][p_parser]:
                    # For protocol scan IP
                    if p_parser == 'ip' or p_parser == 'gre':
                        r_buffer_p += '%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n' % (r_buffer, p_parser, 'Prot ' + str(p_name),
                                    result['scan'][host][p_parser][p_name]['state'],
                                    result['scan'][host][p_parser][p_name]['name'],
                                    result['nmap']['scaninfo'][p_parser]['method'],
                                    result['scan'][host][p_parser][p_name]['reason'],
                                    result['nmap']['scanstats']['elapsed'])
                    # For port scan TCP / UDP
                    else:
                        if len(sys.argv) == 5 and sys.argv[4].find('n') != -1:
                            if result['scan'][host][p_parser][p_name]['reason'] != 'no-response':
                                r_buffer_p += '%s\t%s\t%s\t%s\t%s %s\t%s\t%s\t%s\n' % (r_buffer, p_parser, str(p_name),
                                    result['scan'][host][p_parser][p_name]['state'],
                                    result['scan'][host][p_parser][p_name]['product'],
                                    result['scan'][host][p_parser][p_name]['version'],
                                    result['nmap']['scaninfo'][p_parser]['method'],
                                    result['scan'][host][p_parser][p_name]['reason'],
                                    result['nmap']['scanstats']['elapsed'])
                        else:
                            r_buffer_p += '%s\t%s\t%s\t%s\t%s %s\t%s\t%s\t%s\n' % (r_buffer, p_parser, str(p_name),
                                result['scan'][host][p_parser][p_name]['state'],
                                result['scan'][host][p_parser][p_name]['product'],
                                result['scan'][host][p_parser][p_name]['version'],
                                result['nmap']['scaninfo'][p_parser]['method'],
                                result['scan'][host][p_parser][p_name]['reason'],
                                result['nmap']['scanstats']['elapsed'])
                # Write buffer to file. lock is used for safety
                with pool_lock:
                    fvert.write(r_buffer_p)
                    fvert.flush()


scanner = NmapWaitForMe()
pool_lock = threading.Lock()

ports_prot = {'tcp':'tcp', 'udp': 'udp', 'gre':'gre', 'ip':'ip'}
port_udp_args = ' -n -sU -sV -Pn'
port_syn_args = ' -n -sV --version-intensity 4 -Pn'
port_ike_args = ' -n -sU --script ike-version'

if __name__ == '__main__':
    print('\nseek service-version version 1.0')
    if len(sys.argv) == 2:
        dt_start = datetime.datetime.now()
        fvert = open(sys.argv[1] + '-SERVICE-VERSION.txt', 'w')
        fvert.writelines('time                                                                    \n')
        fvert.write('sS Scan with service version\n')
        fvert.write('\nIP\tPROTOCOL\tPORT\tPORT-STATUS\tVERSION\tSCAN-TYPE\tPORT-REASON\tEXEC-TIME\n')
        fvert.flush()

        # Parse the file and search for syn scan with open port
        with open(sys.argv[1], 'r') as fverf:
            for p_input in fverf:
                p_match = re.split(r'\t',p_input)
                # syn scan
                if p_match.__len__() > 6 and p_match[5] == 'syn' and p_match[3] == 'open':
                    print('Scanning %s port %s' % (p_match[0], p_match[2]))
                    scanner.scan(p_match[0], p_match[2], port_syn_args, callback=callback_result, sudo=True)
                    while scanner.still_scanning():
                        try:
                            scanner.wait(2)
                        except(KeyboardInterrupt):
                            scanner.stop()
                            os.system('killall -9 nmap')
                            raise
                # udp scan
                elif p_match.__len__() > 6 and p_match[5] == 'udp' and p_match[3] == 'open':
                    if p_match[2] == '500':
                        # udp with ike-script
                        scanner.scan(p_match[0], p_match[2], port_ike_args, callback=callback_result, sudo=True)
                    else:
                        # normal udp
                        scanner.scan(p_match[0], p_match[2], port_udp_args, callback=callback_result, sudo=True)
                    while scanner.still_scanning():
                        try:
                            scanner.wait(2)
                        except(KeyboardInterrupt):
                            scanner.stop()
                            os.system('killall -9 nmap')
                            raise
        fvert.close()

        # Adding time stamp
        with open(sys.argv[1] + '-SERVICE-VERSION.txt', 'r+') as ft:
            ft.seek(0)
            timestamp = (datetime.datetime.utcnow() - dt_start)
            ft.write(str(timestamp))
        print('Done!')
    else:
        print ('Usage: python seekversion.py <seeker-text-file>\n')
        print ('This script will automatically generate <seeker-text-file>-SERVICE-VERSION.txt file')